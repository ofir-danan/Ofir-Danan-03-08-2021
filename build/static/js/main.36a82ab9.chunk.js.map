{"version":3,"sources":["actions/types.js","reducers/index.js","store.js","images/icons.js","components/WeatherCard.js","actions/index.js","components/FavoriteCard.js","images/loader.gif","components/Home.js","components/Favorites.js","images/Weather_logos_transparent.png","images/Weather_logos_white.png","components/Settings.js","components/Select.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["LOCATION_ID","TEMP_UNIT","DARK_MODE","FAVORITES","REMOVE_FAVORITE","CITY","KEY","localstorgeLocationId","localStorage","getItem","localstorgeUnit","localstorgeCity","localstorgeDarkMode","localstorgeFavorites","JSON","parse","userPref","state","locationId","unit","city","darkMode","favorites","action","type","setItem","payload","Boolean","removedArray","filter","favorite","index","stringify","favoritesArray","filteredArray","self","findIndex","f","store","createStore","applyMiddleware","thunkMiddleware","icons","WeatherCard","weather","date","String","Date","slice","className","fontSize","label","placement","href","Link","src","Day","Icon","alt","IconPhrase","Temperature","Minimum","Value","style","display","Unit","Maximum","Night","getCurrentPosition","coordinates","dispatch","a","axios","process","res","data","Key","EnglishName","setKey","key","setCityName","FavoriteCard","currentWeather","getState","useState","setFavorite","useEffect","find","item","handleChange","setFavorites","removeFavorites","onClick","WeatherIcon","WeatherText","to","colorScheme","IsDayTime","size","zIndex","apikey","Home","fiveDaysWeather","setFiveDaysWeather","setCurrentWeather","isLoading","setIsLoading","fiveDaysData","fetchWeather","loader","as","textAlign","Headline","Text","DailyForecasts","map","day","i","Favorites","value","setValue","favoriteCities","setFavoriteCities","favoriteCitiesWeather","setFavoriteCitiesWeather","isFatching","setIsFatching","interval","setInterval","clearInterval","currentArray","fetchCurrentWeather","info","length","forEach","push","Settings","storePref","userUnit","setUserUnit","darkModePref","setDarkModePref","useDisclosure","isOpen","onOpen","onClose","borderBottomWidth","spacing","htmlFor","ml","onChange","defaultChecked","id","e","defaultValue","direction","Select","setCity","textInput","setTextInput","cityList","setCityList","then","list","name","LocalizedName","country","Country","Autocomplete","options","getOptionLabel","option","fullWidth","event","onInputChange","getOptionSelected","renderInput","params","TextField","variant","renderOption","textTransform","NevBar","location","useLocation","setCoordinates","navigator","geolocation","position","coords","latitude","longitude","Weather_logos_white","Weather_logos_transparent","margin","w","pathname","withRouter","connect","setDarkMode","NavBar","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAAaA,EAAc,cACdC,EAAY,YACZC,EAAY,YACZC,EAAY,YACZC,EAAkB,kBAClBC,EAAO,OACPC,EAAM,MCKbC,EAAwBC,aAAaC,QAAQ,cAC7CC,EAAkBF,aAAaC,QAAQ,QACvCE,EAAkBH,aAAaC,QAAQ,QACvCG,EAAsB,iBAA2C,SAArCJ,aAAaC,QAAQ,aACjDI,EAAuBC,KAAKC,MAAMP,aAAaC,QAAQ,cA2E9CO,EAxEE,WASX,IARJC,EAQG,uDARK,CACNC,WAAYX,GAAyB,OACrCY,KAAMT,GAAmB,SACzBU,KAAMT,GAAmB,WACzBU,SAAUT,IAAuB,EACjCU,UAAWT,GAAwB,IAErCU,EACG,uCACH,OAAQA,EAAOC,MACb,KAAKvB,EAEH,OADAO,aAAaiB,QAAQ,OAAQF,EAAOG,SAC7B,2BACFT,GADL,IAEEE,KAAMI,EAAOG,UAEjB,KAAK1B,EAGH,OAFAQ,aAAaiB,QAAQ,aAAcF,EAAOG,QAAQR,YAClDV,aAAaiB,QAAQ,OAAQF,EAAOG,QAAQN,MACrC,2BACFH,GADL,IAEEC,WAAYK,EAAOG,QAAQR,WAC3BE,KAAMG,EAAOG,QAAQN,OAEzB,KAAKlB,EAEH,OADAM,aAAaiB,QAAQ,WAAYE,QAAQJ,EAAOG,UACzC,2BACFT,GADL,IAEEI,SAAUM,QAAQJ,EAAOG,WAE7B,KAAKrB,EAEH,OADAG,aAAaiB,QAAQ,OAAQF,EAAOG,SAC7B,2BACFT,GADL,IAEEG,KAAMG,EAAOG,UAEjB,KAAKpB,EAEH,OADAE,aAAaiB,QAAQ,aAAcF,EAAOG,SACnC,2BACFT,GADL,IAEEC,WAAYK,EAAOG,UAEvB,KAAKtB,EACH,IAAMwB,EAAeX,EAAMK,UAAUO,QACnC,SAACC,EAAUC,GAAX,OAAqBA,IAAUR,EAAOG,WAGxC,OADAlB,aAAaiB,QAAQ,YAAaX,KAAKkB,UAAUJ,IAC1C,2BACFX,GADL,IAEEK,UAAWM,IAEf,KAAKzB,EACH,IAAM8B,EAAc,sBAAOhB,EAAMK,WAAb,CAAwBC,EAAOG,UAC7CQ,EAAgBD,EAAeJ,QACnC,SAACC,EAAUC,EAAOI,GAAlB,OACEJ,IACAI,EAAKC,WACH,SAACC,GAAD,OACEA,EAAEjB,OAASU,EAASV,MAAQiB,EAAEnB,aAAeY,EAASZ,iBAI9D,OADAV,aAAaiB,QAAQ,YAAaX,KAAKkB,UAAUE,IAC1C,2BACFjB,GADL,IAEEK,UAAWY,IAEf,QACE,OAAOjB,IChFEqB,EAFDC,YAAYvB,EAAUwB,YAAgBC,M,oDCuCrCC,EA1CD,CACZ,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,EAAG,iEACH,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,iEACJ,GAAI,kE,OCNSC,MA/Bf,YAAmC,IAAZC,EAAW,EAAXA,QAEfC,EAAOC,OAAO,IAAIC,KAAKH,EAAQG,OAAOC,MAAM,EAAG,IAErD,OACE,sBAAKC,UAAU,oBAAf,UACE,cAAC,IAAD,CAAMC,SAAS,KAAf,SAAqBL,IACrB,cAAC,IAAD,CAASM,MAAM,oBAAoBC,UAAU,aAA7C,SACE,mBAAGC,KAAMT,EAAQU,KAAjB,SACE,qBAAKC,IAAKb,EAAME,EAAQY,IAAIC,MAAOC,IAAKd,EAAQY,IAAIG,iBAGxD,qBAAKV,UAAU,eAAf,SACE,eAAC,IAAD,WACGL,EAAQgB,YAAYC,QAAQC,MAC7B,eAAC,IAAD,CAAMZ,SAAS,KAAKa,MAAO,CAAEC,QAAS,UAAtC,UACGpB,EAAQgB,YAAYC,QAAQI,KAD/B,OACsC,OAC9B,IAJV,KAKKrB,EAAQgB,YAAYM,QAAQJ,MAC/B,eAAC,IAAD,CAAMZ,SAAS,KAAKa,MAAO,CAAEC,QAAS,UAAtC,UACGpB,EAAQgB,YAAYM,QAAQD,KAD/B,eAKJ,eAAC,IAAD,CAAMf,SAAS,KAAf,UACGN,EAAQY,IAAIG,WADf,IAC4Bf,EAAQuB,MAAMR,kB,oCCfnCS,EAAqB,SAACC,GACjC,8CAAO,WAAmCC,GAAnC,eAAAC,EAAA,sEACaC,IAAM,oFAAD,OALZC,mCAKY,cAC2EJ,IAF7F,OACCK,EADD,OAILJ,EAAS,CACP9C,KAAMxB,EACN0B,QAAS,CAAER,WAAYwD,EAAIC,KAAKC,IAAKxD,KAAMsD,EAAIC,KAAKE,eANjD,2CAAP,uDA6BWC,EAAS,SAACC,GAAD,MAAU,CAC9BvD,KAAMlB,EACNoB,QAASqD,IAEEC,EAAc,SAAC5D,GAAD,MAAW,CACpCI,KAAMnB,EACNqB,QAASN,ICoCI6D,MA7Ef,YAA6D,IAArCC,EAAoC,EAApCA,eAAgB9D,EAAoB,EAApBA,KAAMF,EAAc,EAAdA,WACpCC,EAASmB,EAAM6C,WAAfhE,KACAG,EAAcgB,EAAM6C,WAApB7D,UACR,EAAgC8D,oBAAS,GAAzC,mBAAOtD,EAAP,KAAiBuD,EAAjB,KAEAC,qBAAU,WACQhE,EAAUiE,MAAK,SAACC,GAAD,OAAUA,EAAKtE,aAAeA,MAE3DmE,GAAY,KAEb,IAEHC,qBAAU,cAAU,CAACxD,IAGrB,IAAM2D,EAAe,WAKnB,GAJAJ,GAAavD,GACRA,GACHQ,EAAMgC,SDSgB,SAAChD,GAAD,MAAgB,CAC1CE,KAAMrB,EACNuB,QAASJ,GCXUoE,CAAa,CAAEtE,KAAMA,EAAMF,WAAYA,KAEpDY,EAAU,CACZ,IAAMC,EAAQT,EAAUc,WAAU,SAACoD,GAAD,OAAUA,EAAKpE,OAASA,KAC1DkB,EAAMgC,SDSmB,SAACvC,GAAD,MAAY,CACzCP,KAAMpB,EACNsB,QAASK,GCXU4D,CAAgB5D,MAUnC,OACE,sBAAKkB,UAAU,eAAe2C,QANZ,WAClBtD,EAAMgC,SAASQ,EAAO5D,IACtBoB,EAAMgC,SAASU,EAAY5D,KAI3B,UACE,cAAC,IAAD,CAAS+B,MAAM,oBAAoBC,UAAU,aAA7C,SACE,mBAAGC,KAAM6B,EAAe5B,KAAxB,SACE,qBACEC,IAAKb,EAAMwC,EAAeW,aAC1BnC,IAAKwB,EAAeY,YACpB7C,UAAU,qBAKhB,cAAC,IAAD,CAASE,MAAM,kBAAkBC,UAAU,aAA3C,SACE,eAAC,IAAD,CAAM2C,GAAG,IAAT,UACE,sBAAK9C,UAAU,eAAf,UACE,eAAC,IAAD,WACGiC,EAAetB,YAAYzC,GAAM2C,MAAO,IACxCoB,EAAetB,YAAYzC,GAAM8C,KAFpC,UAIA,cAAC,IAAD,CAAO+B,YAAad,EAAee,UAAY,QAAU,SAAzD,SACGf,EAAee,UAAY,MAAQ,aAGxC,cAAC,IAAD,UAAUf,EAAeY,cACzB,sBAAK7C,UAAU,cAAf,UACE,gCACG,IACD,eAAC,IAAD,oBAAa7B,KAFf,IAE4B,eAAC,IAAD,2BAAoBF,QAE/CY,EACC,cAAC,IAAD,CACE8D,QAASH,EACTS,KAAK,KACLnC,MAAO,CAAEoC,OAAQ,KAGnB,cAAC,IAAD,CAAMP,QAASH,EAAcS,KAAK,KAAKnC,MAAO,CAAEoC,OAAQ,iBC7EvD,MAA0B,mCCSnCC,EAAS3B,mCA0DA4B,MAxDf,WACE,MAA8CjB,mBAAS,IAAvD,mBAAOkB,EAAP,KAAwBC,EAAxB,KACA,EAA4CnB,mBAAS,IAArD,mBAAOF,EAAP,KAAuBsB,EAAvB,KACA,EAAkCpB,oBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KAEMxF,EAAaoB,EAAM6C,WAAWjE,WAC9BC,EAAOmB,EAAM6C,WAAWhE,KACxBC,EAAOkB,EAAM6C,WAAW/D,KAwB9B,IAtBAkE,qBAAU,WAAM,4CAGd,gCAAAf,EAAA,sEAE6BC,IAAM,8DAAD,OACgCtD,EADhC,mBACqDkF,EADrD,mBAEnB,WAATjF,IAJN,cAEQwF,EAFR,gBAQyBnC,IAAM,2DAAD,OACiCtD,EADjC,mBACsDkF,IATpF,gBAQUzB,EARV,EAQUA,KAGR4B,EAAmBI,EAAahC,MAChC6B,EAAkB7B,GAClB+B,GAAa,GAbf,6CAHc,sBACdA,GAAa,GADC,mCAmBdE,KACC,CAACzF,EAAMD,IAEHuF,GACL,OAAO,qBAAKxD,UAAU,UAAUM,IAAKsD,IAGvC,OACE,sBAAK5D,UAAU,OAAf,UACE,eAAC,IAAD,CAAS6D,GAAG,KAAKZ,KAAK,KAAKnC,MAAO,CAAEgD,UAAW,UAA/C,UACG3F,EADH,KACWkF,EAAgBU,SAASC,QAEpC,qBAAKhE,UAAU,oBAAf,SACE,cAAC,EAAD,CACEiC,eAAgBA,EAAe,GAC/B9D,KAAMA,EACNF,WAAYA,MAGhB,qBAAK+B,UAAU,oBAAf,SACGqD,EAAgBY,eAAeC,KAAI,SAACC,EAAKC,GACxC,OAAO,cAAC,EAAD,CAAqBzE,QAASwE,GAAZC,Y,SCnD7BjB,EAAS3B,mCA6EA6C,MA3Ef,WACE,MAA0BlC,mBAAS,IAAIrC,MAAvC,mBAAOwE,EAAP,KAAcC,EAAd,KACA,EAA4CpC,mBAAS,IAArD,mBAAOqC,EAAP,KAAuBC,EAAvB,KACA,EAA0DtC,mBAAS,IAAnE,mBAAOuC,EAAP,KAA8BC,EAA9B,KACA,EAAkCxC,oBAAS,GAA3C,mBAAOqB,EAAP,KAAkBC,EAAlB,KACA,EAAoCtB,oBAAS,GAA7C,mBAAOyC,EAAP,KAAmBC,EAAnB,KA6CA,OA1CAxC,qBAAU,WACR,IAAMyC,EAAWC,aAAY,kBAAMR,EAAS,IAAIzE,QAAS,KAEzD,OAAO,WACLkF,cAAcF,MAEf,IAEHzC,qBAAU,WACRoC,EAAkBpF,EAAM6C,WAAW7D,aAClC,IAEHgE,qBAAU,WACR,IAAM4C,EAAe,GADP,SAECC,EAFD,8EAEd,WAAmC3C,GAAnC,mBAAAjB,EAAA,sEACyBC,IAAM,2DAAD,OACiCgB,EAAKtE,WADtC,mBAC2DkF,IAFzF,uBACUzB,EADV,EACUA,KAGFyD,EAAOzD,EAAK,GAJpB,6CAKca,GAAS4C,IALvB,4CAFc,sBASVT,EAAsBU,OAASZ,EAAeY,SAAWR,IAC3DC,GAAc,GAEdL,EAAea,QAAf,uCAAuB,WAAO9C,EAAMzD,EAAOgD,GAApB,eAAAR,EAAA,sEACH4D,EAAoB3C,GADjB,OACfd,EADe,OAErBwD,EAAaK,KAAK7D,GAClBkD,EAAyBM,GAHJ,2CAAvB,4DAOAP,EAAsBU,SAAWZ,EAAeY,QAChDV,EAAsBU,OAAS,IAE/BP,GAAc,GACdpB,GAAa,IAEe,IAA1Be,EAAeY,QACjB3B,GAAa,KAEd,CAACiB,EAAuBF,IAEvBhB,EACK,qBAAKxD,UAAU,UAAUM,IAAKsD,IAGrC,qBAAK5D,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACE,8CACA,cAAC,IAAD,CAAOsE,MAAOA,OAEhB,qBAAKtE,UAAU,eAAf,SACG0E,EAAsBR,KAAI,SAAC/F,EAAM2D,GAAP,OACzB,cAAC,EAAD,CAEEG,eAAgB9D,EAChBA,KAAMA,EAAKA,KACXF,WAAYE,EAAKF,YAHZ6D,cC1EJ,MAA0B,sDCA1B,OAA0B,gD,yFC+E1ByD,OA5Df,WACE,IAAMC,EAAYnG,EAAM6C,WACxB,EAAgCC,mBAASqD,EAAUtH,MAAnD,mBAAOuH,EAAP,KAAiBC,EAAjB,KACA,EAAwCvD,mBAASqD,EAAUpH,UAA3D,mBAAOuH,EAAP,KAAqBC,EAArB,KACA,EAAoCC,eAA5BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,QAYxB,OATA3D,qBAAU,WACRhD,EAAMgC,SPDwB,CAChC9C,KAAMvB,EACNyB,QODyBgH,MACtB,CAACA,IAGJpD,qBAAU,WACRhD,EAAMgC,SPDgC,CACxC9C,KAAMtB,EACNwB,QOD6BkH,MAC1B,CAACA,IAGF,qCACE,cAAC,KAAD,CAAchD,QAASoD,EAAQ/F,UAAW,iBAC1C,eAAC,KAAD,CAAQ8F,OAAQA,EAAQ3F,UAAU,SAAS6F,QAASA,EAApD,UACE,cAAC,KAAD,IACA,eAAC,KAAD,WACE,cAAC,KAAD,IACA,cAAC,KAAD,CAAcC,kBAAkB,MAAhC,kCAIA,cAAC,KAAD,UACE,eAAC,KAAD,CAAOC,QAAQ,OAAf,UACE,eAAC,KAAD,WACE,uBAAOC,QAAQ,WAAf,uBACA,cAAC,KAAD,CACEC,GAAG,KACHC,SAAU,kBAAMT,GAAiBD,IACjCW,eAAgBX,EAChBY,GAAG,gBAIP,eAAC,KAAD,WACE,uBAAOJ,QAAQ,OAAf,qCACA,cAAC,KAAD,CACEI,GAAG,OACHF,SAAU,SAACG,GAAD,OAAOd,EAAYc,IAC7BC,aAAcjB,EAAUtH,KAH1B,SAKE,eAAC,KAAD,CAAOwI,UAAU,MAAjB,UACE,cAAC,KAAD,CAAOpC,MAAM,SAAb,eACA,cAAC,KAAD,CAAOA,MAAM,WAAb,sC,oBCWLqC,GApEA,WACb,IAAM5I,EAAWsB,EAAM6C,WACvB,EAAwBC,mBAAS,IAAjC,mBAAOhE,EAAP,KAAayI,EAAb,KACA,EAAkCzE,mBAAS,IAA3C,mBAAO0E,EAAP,KAAkBC,EAAlB,KACA,EAAgC3E,mBAAS,IAAzC,mBAAO4E,EAAP,KAAiBC,EAAjB,KAEA3E,qBAAU,WACRuE,EAAQ7I,EAASI,QAChB,CAACJ,EAASI,OAEbkE,qBAAU,WAiBJwE,GAdFtF,IAAM,8EAAD,OAfIC,mCAeJ,cACuFqF,IAC1FI,MAAK,SAACxF,GACN,IACMyF,EADWzF,EAATC,KACUwC,KAAI,SAAC/F,GACrB,MAAO,CACLgJ,KAAMhJ,EAAKiJ,cACXC,QAASlJ,EAAKmJ,QAAQF,cACtBtF,IAAK3D,EAAKwD,QAGdqF,EAAYE,QAMf,CAACL,IAUJ,OACE,cAACU,GAAA,EAAD,CACEC,QAAST,EACTU,eAAgB,SAACC,GACf,OAAOA,EAAOP,KAAOO,EAAOP,KAAO,IAErCQ,WAAW,EACXrD,MAAOnG,EACPkI,SAAU,SAACuB,EAAOtD,GAAR,OAhBO,SAACA,GAChBA,IACFsC,EAAQtC,GACRjF,EAAMgC,SAASQ,EAAOyC,EAAMxC,MAC5BzC,EAAMgC,SAASU,EAAYuC,EAAM6C,QAYL3E,CAAa8B,IACzCuD,cAAe,SAACD,EAAOtD,GAAR,OAAkBwC,EAAaxC,IAC9CwD,kBAAmB,SAACJ,EAAQpD,GAAT,OACjBoD,EAAOP,OAAS7C,EAAM6C,MAAmB,KAAXO,GAEhCK,YAAa,SAACC,GAAD,OACX,cAACC,GAAA,EAAD,2BACMD,GADN,IAEE1D,MAAOuC,EACP3G,MAAO,WACPgI,QAAQ,eAGZC,aAAc,SAACT,GAAD,OACZ,sBAAM5G,MAAO,CAAEsH,cAAe,cAA9B,SAA+CV,EAAOP,W,UCU/CkB,OAvEf,WACE,IAAMC,EAAWC,cACXxK,EAAWsB,EAAM6C,WACvB,EAAsCC,qBAAtC,mBAAOf,EAAP,KAAoBoH,EAApB,KAcA,OAZAnG,qBAAU,WAERoG,UAAUC,YAAYvH,oBAAmB,SAACwH,GACxCH,EAAe,GAAD,OACTG,EAASC,OAAOC,SADP,YACmBF,EAASC,OAAOE,iBAGlD,IAMD,qCACE,cAAC,IAAD,CAAMhG,GAAG,IAAT,SACE,qBACExC,IACEvC,EAASK,SAAW2K,GAAsBC,EAE5CvI,IAAI,eACJT,UAAU,WAGd,cAAC,IAAD,CAASE,MAAM,uBAAuBC,UAAU,aAAhD,SACE,cAAC,IAAD,CAAM2C,GAAG,IAAT,SACE,cAAC,KAAD,CACEH,QAjBU,WAClBtD,EAAMgC,SAASF,EAAmBC,KAiB1B6B,KAAK,KACLnC,MAAO,CAAEmI,OAAQ,cAIvB,cAAC,KAAD,CAAKC,EAAE,MAAP,SACE,cAAC,GAAD,MAEF,sBAAKlJ,UAAU,MAAf,UACE,+BACE,6BACE,cAAC,IAAD,CACEA,UACwB,MAAtBsI,EAASa,SAAmB,oBAAsB,OAEpDrG,GAAG,IAJL,oBASF,6BACE,cAAC,IAAD,CACE9C,UACwB,eAAtBsI,EAASa,SACL,oBACA,OAENrG,GAAG,aANL,4BAYJ,cAAC,GAAD,WC5BOsG,mBAAWC,aAJ1B,SAAyBrL,GACvB,OAAOA,IAGiBqL,EAtC1B,WACE,IAAMtL,EAAWsB,EAAM6C,WACvB,EAAsCC,mBAAS,IAA/C,mBAAOf,EAAP,KAAoBoH,EAApB,KACA,EAAgCrG,oBAAS,GAAzC,mBAAO/D,EAAP,KAAiBkL,EAAjB,KAkBA,OAjBAjH,qBAAU,WACRoG,UAAUC,YAAYvH,oBAAmB,SAACwH,GACxCH,EAAe,GAAD,OACTG,EAASC,OAAOC,SADP,YACmBF,EAASC,OAAOE,iBAGlD,IAEHzG,qBAAU,WACRiH,EAAY5K,QAAQX,EAASK,aAC5B,CAACL,EAASK,WAEbiE,qBAAU,WACJjB,GACF/B,EAAMgC,SAASF,EAAmBC,MAEnC,CAACA,IAEF,sBAAKpB,UAAW5B,EAAW,eAAiB,MAA5C,UACE,iCACE,cAACmL,GAAD,MAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtG,IACjC,cAAC,IAAD,CAAOqG,KAAK,aAAaC,UAAWrF,c,UC1B7BsF,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUhL,MAAOA,EAAjB,SACE,cAAC,KAAD,UACE,cAAC,GAAD,YAKRiL,SAASC,eAAe,SAG1BZ,O","file":"static/js/main.36a82ab9.chunk.js","sourcesContent":["export const LOCATION_ID = \"LOCATION_ID\";\r\nexport const TEMP_UNIT = \"TEMP_UNIT\";\r\nexport const DARK_MODE = \"DARK_MODE\";\r\nexport const FAVORITES = \"FAVORITES\";\r\nexport const REMOVE_FAVORITE = \"REMOVE_FAVORITE\";\r\nexport const CITY = \"CITY\";\r\nexport const KEY = \"KEY\";\r\n","import {\r\n  TEMP_UNIT,\r\n  LOCATION_ID,\r\n  DARK_MODE,\r\n  FAVORITES,\r\n  CITY,\r\n  KEY,\r\n  REMOVE_FAVORITE,\r\n} from \"../actions/types\";\r\n\r\n// getting all the user info from local storage\r\nconst localstorgeLocationId = localStorage.getItem(\"locationId\");\r\nconst localstorgeUnit = localStorage.getItem(\"unit\");\r\nconst localstorgeCity = localStorage.getItem(\"city\");\r\nconst localstorgeDarkMode = () => localStorage.getItem(\"darkMode\") === \"true\";\r\nconst localstorgeFavorites = JSON.parse(localStorage.getItem(\"favorites\"));\r\n\r\n// setting local storage values if exists and if not initial values\r\nconst userPref = (\r\n  state = {\r\n    locationId: localstorgeLocationId || 215854,\r\n    unit: localstorgeUnit || \"Metric\",\r\n    city: localstorgeCity || \"Tel Aviv\",\r\n    darkMode: localstorgeDarkMode || false,\r\n    favorites: localstorgeFavorites || [],\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case TEMP_UNIT:\r\n      localStorage.setItem(\"unit\", action.payload);\r\n      return {\r\n        ...state,\r\n        unit: action.payload,\r\n      };\r\n    case LOCATION_ID:\r\n      localStorage.setItem(\"locationId\", action.payload.locationId);\r\n      localStorage.setItem(\"city\", action.payload.city);\r\n      return {\r\n        ...state,\r\n        locationId: action.payload.locationId,\r\n        city: action.payload.city,\r\n      };\r\n    case DARK_MODE:\r\n      localStorage.setItem(\"darkMode\", Boolean(action.payload));\r\n      return {\r\n        ...state,\r\n        darkMode: Boolean(action.payload),\r\n      };\r\n    case CITY:\r\n      localStorage.setItem(\"city\", action.payload);\r\n      return {\r\n        ...state,\r\n        city: action.payload,\r\n      };\r\n    case KEY:\r\n      localStorage.setItem(\"locationId\", action.payload);\r\n      return {\r\n        ...state,\r\n        locationId: action.payload,\r\n      };\r\n    case REMOVE_FAVORITE:\r\n      const removedArray = state.favorites.filter(\r\n        (favorite, index) => index !== action.payload\r\n      );\r\n      localStorage.setItem(\"favorites\", JSON.stringify(removedArray));\r\n      return {\r\n        ...state,\r\n        favorites: removedArray,\r\n      };\r\n    case FAVORITES:\r\n      const favoritesArray = [...state.favorites, action.payload];\r\n      const filteredArray = favoritesArray.filter(\r\n        (favorite, index, self) =>\r\n          index ===\r\n          self.findIndex(\r\n            (f) =>\r\n              f.city === favorite.city && f.locationId === favorite.locationId\r\n          )\r\n      );\r\n      localStorage.setItem(\"favorites\", JSON.stringify(filteredArray));\r\n      return {\r\n        ...state,\r\n        favorites: filteredArray,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userPref;\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport userPref from \"./reducers\";\r\n\r\nconst store = createStore(userPref, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","// accuweather icons list for weather icons\r\nconst icons = {\r\n  1: \"https://developer.accuweather.com/sites/default/files/01-s.png\",\r\n  2: \"https://developer.accuweather.com/sites/default/files/02-s.png\",\r\n  3: \"https://developer.accuweather.com/sites/default/files/03-s.png\",\r\n  4: \"https://developer.accuweather.com/sites/default/files/04-s.png\",\r\n  5: \"https://developer.accuweather.com/sites/default/files/05-s.png\",\r\n  6: \"https://developer.accuweather.com/sites/default/files/06-s.png\",\r\n  7: \"https://developer.accuweather.com/sites/default/files/07-s.png\",\r\n  8: \"https://developer.accuweather.com/sites/default/files/08-s.png\",\r\n  11: \"https://developer.accuweather.com/sites/default/files/11-s.png\",\r\n  12: \"https://developer.accuweather.com/sites/default/files/12-s.png\",\r\n  13: \"https://developer.accuweather.com/sites/default/files/13-s.png\",\r\n  14: \"https://developer.accuweather.com/sites/default/files/14-s.png\",\r\n  15: \"https://developer.accuweather.com/sites/default/files/15-s.png\",\r\n  16: \"https://developer.accuweather.com/sites/default/files/16-s.png\",\r\n  17: \"https://developer.accuweather.com/sites/default/files/17-s.png\",\r\n  18: \"https://developer.accuweather.com/sites/default/files/18-s.png\",\r\n  19: \"https://developer.accuweather.com/sites/default/files/19-s.png\",\r\n  20: \"https://developer.accuweather.com/sites/default/files/20-s.png\",\r\n  21: \"https://developer.accuweather.com/sites/default/files/21-s.png\",\r\n  22: \"https://developer.accuweather.com/sites/default/files/22-s.png\",\r\n  23: \"https://developer.accuweather.com/sites/default/files/23-s.png\",\r\n  24: \"https://developer.accuweather.com/sites/default/files/24-s.png\",\r\n  25: \"https://developer.accuweather.com/sites/default/files/25-s.png\",\r\n  26: \"https://developer.accuweather.com/sites/default/files/26-s.png\",\r\n  29: \"https://developer.accuweather.com/sites/default/files/29-s.png\",\r\n  30: \"https://developer.accuweather.com/sites/default/files/30-s.png\",\r\n  31: \"https://developer.accuweather.com/sites/default/files/31-s.png\",\r\n  32: \"https://developer.accuweather.com/sites/default/files/32-s.png\",\r\n  33: \"https://developer.accuweather.com/sites/default/files/33-s.png\",\r\n  34: \"https://developer.accuweather.com/sites/default/files/34-s.png\",\r\n  35: \"https://developer.accuweather.com/sites/default/files/35-s.png\",\r\n  36: \"https://developer.accuweather.com/sites/default/files/36-s.png\",\r\n  37: \"https://developer.accuweather.com/sites/default/files/37-s.png\",\r\n  38: \"https://developer.accuweather.com/sites/default/files/38-s.png\",\r\n  39: \"https://developer.accuweather.com/sites/default/files/39-s.png\",\r\n  40: \"https://developer.accuweather.com/sites/default/files/40-s.png\",\r\n  41: \"https://developer.accuweather.com/sites/default/files/41-s.png\",\r\n  42: \"https://developer.accuweather.com/sites/default/files/42-s.png\",\r\n  43: \"https://developer.accuweather.com/sites/default/files/43-s.png\",\r\n  44: \"https://developer.accuweather.com/sites/default/files/44-s.png\",\r\n};\r\nexport default icons;\r\n","import React from \"react\";\r\nimport { Text, Heading, Tooltip } from \"@chakra-ui/react\";\r\nimport icons from \"../images/icons\";\r\n\r\nfunction WeatherCard({ weather }) {\r\n  // formatting the date\r\n  const date = String(new Date(weather.Date)).slice(0, 15);\r\n\r\n  return (\r\n    <div className=\"card weather-data\">\r\n      <Text fontSize=\"sm\">{date}</Text>\r\n      <Tooltip label=\"Go to accuweather\" placement=\"left-start\">\r\n        <a href={weather.Link}>\r\n          <img src={icons[weather.Day.Icon]} alt={weather.Day.IconPhrase} />\r\n        </a>\r\n      </Tooltip>\r\n      <div className=\"image-labels\">\r\n        <Heading>\r\n          {weather.Temperature.Minimum.Value}\r\n          <Text fontSize=\"xl\" style={{ display: \"inline\" }}>\r\n            {weather.Temperature.Minimum.Unit}°{\" \"}\r\n          </Text>{\" \"}\r\n          - {weather.Temperature.Maximum.Value}\r\n          <Text fontSize=\"xl\" style={{ display: \"inline\" }}>\r\n            {weather.Temperature.Maximum.Unit}°\r\n          </Text>\r\n        </Heading>\r\n      </div>\r\n      <Text fontSize=\"xl\">\r\n        {weather.Day.IconPhrase}-{weather.Night.IconPhrase}\r\n      </Text>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import axios from \"axios\";\r\nimport {\r\n  TEMP_UNIT,\r\n  LOCATION_ID,\r\n  DARK_MODE,\r\n  FAVORITES,\r\n  CITY,\r\n  KEY,\r\n  REMOVE_FAVORITE,\r\n} from \"./types\";\r\nimport dotenv from \"dotenv\";\r\nconst apikey = process.env.REACT_APP_API_KEY;\r\n\r\n// get location key by location coordinates\r\nexport const getCurrentPosition = (coordinates) => {\r\n  return async function fetchCurrentWeather(dispatch) {\r\n    const res = await axios(\r\n      `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${apikey}&q=${coordinates}`\r\n    );\r\n    dispatch({\r\n      type: LOCATION_ID,\r\n      payload: { locationId: res.data.Key, city: res.data.EnglishName },\r\n    });\r\n  };\r\n};\r\n\r\nexport const setUnit = (unit) => ({\r\n  type: TEMP_UNIT,\r\n  payload: unit,\r\n});\r\n\r\nexport const setDarkMode = (darkMode) => ({\r\n  type: DARK_MODE,\r\n  payload: darkMode,\r\n});\r\n\r\nexport const setFavorites = (favorites) => ({\r\n  type: FAVORITES,\r\n  payload: favorites,\r\n});\r\nexport const removeFavorites = (index) => ({\r\n  type: REMOVE_FAVORITE,\r\n  payload: index,\r\n});\r\nexport const setKey = (key) => ({\r\n  type: KEY,\r\n  payload: key,\r\n});\r\nexport const setCityName = (city) => ({\r\n  type: CITY,\r\n  payload: city,\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport store from \"../store\";\r\nimport icons from \"../images/icons\";\r\nimport { Badge, Heading, Tooltip, Text } from \"@chakra-ui/react\";\r\nimport \"react-clock/dist/Clock.css\";\r\nimport { Star, StarFill } from \"@styled-icons/bootstrap\";\r\nimport { removeFavorites, setCityName, setFavorites, setKey } from \"../actions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction FavoriteCard({ currentWeather, city, locationId }) {\r\n  const { unit } = store.getState();\r\n  const { favorites } = store.getState();\r\n  const [favorite, setFavorite] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const include = favorites.find((item) => item.locationId === locationId);\r\n    if (include) {\r\n      setFavorite(true);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {}, [favorite]);\r\n\r\n  // change favorite status\r\n  const handleChange = () => {\r\n    setFavorite(!favorite);\r\n    if (!favorite) {\r\n      store.dispatch(setFavorites({ city: city, locationId: locationId }));\r\n    }\r\n    if (favorite) {\r\n      const index = favorites.findIndex((item) => item.city === city);\r\n      store.dispatch(removeFavorites(index));\r\n    }\r\n  };\r\n\r\n  // set location data as primary in order to display it in home page by click\r\n  const handelClick = () => {\r\n    store.dispatch(setKey(locationId));\r\n    store.dispatch(setCityName(city));\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-data\" onClick={handelClick}>\r\n      <Tooltip label=\"Go To Accuweather\" placement=\"left-start\">\r\n        <a href={currentWeather.Link}>\r\n          <img\r\n            src={icons[currentWeather.WeatherIcon]}\r\n            alt={currentWeather.WeatherText}\r\n            className=\"weather-icon\"\r\n          />\r\n        </a>\r\n      </Tooltip>\r\n\r\n      <Tooltip label=\"Go To Home Page\" placement=\"left-start\">\r\n        <Link to=\"/\">\r\n          <div className=\"image-labels\">\r\n            <Heading>\r\n              {currentWeather.Temperature[unit].Value}{\" \"}\r\n              {currentWeather.Temperature[unit].Unit}°\r\n            </Heading>\r\n            <Badge colorScheme={currentWeather.IsDayTime ? \"green\" : \"purple\"}>\r\n              {currentWeather.IsDayTime ? \"Day\" : \"Night\"}\r\n            </Badge>\r\n          </div>\r\n          <Heading>{currentWeather.WeatherText}</Heading>\r\n          <div className=\"card-footer\">\r\n            <div>\r\n              {\" \"}\r\n              <Text>City: {city}</Text> <Text>Location ID: {locationId}</Text>\r\n            </div>\r\n            {favorite ? (\r\n              <StarFill\r\n                onClick={handleChange}\r\n                size=\"24\"\r\n                style={{ zIndex: 2 }}\r\n              />\r\n            ) : (\r\n              <Star onClick={handleChange} size=\"24\" style={{ zIndex: 2 }} />\r\n            )}\r\n          </div>\r\n        </Link>\r\n      </Tooltip>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FavoriteCard;\r\n","export default __webpack_public_path__ + \"static/media/loader.df1e3eaf.gif\";","import React, { useEffect, useState } from \"react\";\r\nimport store from \"../store\";\r\nimport dotenv from \"dotenv\";\r\nimport axios from \"axios\";\r\nimport { Heading } from \"@chakra-ui/react\";\r\nimport WeatherCard from \"./WeatherCard\";\r\nimport FavoriteCard from \"./FavoriteCard\";\r\nimport loader from \"../images/loader.gif\";\r\n\r\nconst apikey = process.env.REACT_APP_API_KEY;\r\n\r\nfunction Home() {\r\n  const [fiveDaysWeather, setFiveDaysWeather] = useState([]);\r\n  const [currentWeather, setCurrentWeather] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const locationId = store.getState().locationId;\r\n  const unit = store.getState().unit;\r\n  const city = store.getState().city;\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    // fetch weather of location if location or unit changes\r\n    async function fetchWeather() {\r\n      // five days weather\r\n      const fiveDaysData = await axios(\r\n        `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationId}?apikey=${apikey}&metric=${\r\n          unit === \"Metric\"\r\n        }`\r\n      );\r\n      // current location weather\r\n      const { data } = await axios(\r\n        `http://dataservice.accuweather.com/currentconditions/v1/${locationId}?apikey=${apikey}`\r\n      );\r\n      setFiveDaysWeather(fiveDaysData.data);\r\n      setCurrentWeather(data);\r\n      setIsLoading(false);\r\n    }\r\n\r\n    fetchWeather();\r\n  }, [unit, locationId]);\r\n\r\n  while (isLoading) {\r\n    return <img className=\"loading\" src={loader} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <Heading as=\"h4\" size=\"md\" style={{ textAlign: \"center\" }}>\r\n        {city}: {fiveDaysWeather.Headline.Text}\r\n      </Heading>\r\n      <div className=\"weather-data-home\">\r\n        <FavoriteCard\r\n          currentWeather={currentWeather[0]}\r\n          city={city}\r\n          locationId={locationId}\r\n        />\r\n      </div>\r\n      <div className=\"five-days-content\">\r\n        {fiveDaysWeather.DailyForecasts.map((day, i) => {\r\n          return <WeatherCard key={i} weather={day} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport FavoriteCard from \"./FavoriteCard\";\r\nimport dotenv from \"dotenv\";\r\nimport axios from \"axios\";\r\nimport Clock from \"react-clock\";\r\nimport \"react-clock/dist/Clock.css\";\r\nimport store from \"../store\";\r\nimport loader from \"../images/loader.gif\";\r\n\r\nconst apikey = process.env.REACT_APP_API_KEY;\r\n\r\nfunction Favorites() {\r\n  const [value, setValue] = useState(new Date());\r\n  const [favoriteCities, setFavoriteCities] = useState([]);\r\n  const [favoriteCitiesWeather, setFavoriteCitiesWeather] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isFatching, setIsFatching] = useState(false);\r\n\r\n  // clock interval\r\n  useEffect(() => {\r\n    const interval = setInterval(() => setValue(new Date()), 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setFavoriteCities(store.getState().favorites);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const currentArray = [];\r\n    async function fetchCurrentWeather(item) {\r\n      const { data } = await axios(\r\n        `http://dataservice.accuweather.com/currentconditions/v1/${item.locationId}?apikey=${apikey}`\r\n      );\r\n      const info = data[0];\r\n      return { ...item, ...info };\r\n    }\r\n    if (favoriteCitiesWeather.length < favoriteCities.length && !isFatching) {\r\n      setIsFatching(true);\r\n      // for each favorite get current weather\r\n      favoriteCities.forEach(async (item, index, key) => {\r\n        const res = await fetchCurrentWeather(item);\r\n        currentArray.push(res);\r\n        setFavoriteCitiesWeather(currentArray);\r\n      });\r\n    }\r\n    if (\r\n      favoriteCitiesWeather.length === favoriteCities.length &&\r\n      favoriteCitiesWeather.length > 0\r\n    ) {\r\n      setIsFatching(false);\r\n      setIsLoading(false);\r\n    }\r\n    if (favoriteCities.length === 0) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [favoriteCitiesWeather, favoriteCities]);\r\n\r\n  if (isLoading) {\r\n    return <img className=\"loading\" src={loader} />;\r\n  }\r\n  return (\r\n    <div className=\"body\">\r\n      <div className=\"favorites\">\r\n        <div className=\"clock\">\r\n          <p>Current time:</p>\r\n          <Clock value={value} />\r\n        </div>\r\n        <div className=\"weather-data\">\r\n          {favoriteCitiesWeather.map((city, key) => (\r\n            <FavoriteCard\r\n              key={key}\r\n              currentWeather={city}\r\n              city={city.city}\r\n              locationId={city.locationId}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","export default __webpack_public_path__ + \"static/media/Weather_logos_transparent.58177856.png\";","export default __webpack_public_path__ + \"static/media/Weather_logos_white.359761b8.png\";","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  DrawerCloseButton,\r\n  useDisclosure,\r\n  Stack,\r\n  Box,\r\n  Radio,\r\n  RadioGroup,\r\n  Switch,\r\n} from \"@chakra-ui/react\";\r\nimport { Settings as SettingsIcon } from \"@styled-icons/fluentui-system-regular/Settings\";\r\nimport store from \"../store\";\r\nimport { setUnit, setDarkMode } from \"../actions\";\r\n\r\nfunction Settings() {\r\n  const storePref = store.getState();\r\n  const [userUnit, setUserUnit] = useState(storePref.unit);\r\n  const [darkModePref, setDarkModePref] = useState(storePref.darkMode);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  // set unit preference\r\n  useEffect(() => {\r\n    store.dispatch(setUnit(userUnit));\r\n  }, [userUnit]);\r\n\r\n  // set dark mode preference\r\n  useEffect(() => {\r\n    store.dispatch(setDarkMode(darkModePref));\r\n  }, [darkModePref]);\r\n\r\n  return (\r\n    <>\r\n      <SettingsIcon onClick={onOpen} className={\"setting-icon\"} />\r\n      <Drawer isOpen={isOpen} placement=\"bottom\" onClose={onClose}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerCloseButton />\r\n          <DrawerHeader borderBottomWidth=\"1px\">\r\n            Set Your Preferences\r\n          </DrawerHeader>\r\n\r\n          <DrawerBody>\r\n            <Stack spacing=\"24px\">\r\n              <Box>\r\n                <label htmlFor=\"darkMode\">Dark Mode</label>\r\n                <Switch\r\n                  ml=\"10\"\r\n                  onChange={() => setDarkModePref(!darkModePref)}\r\n                  defaultChecked={darkModePref}\r\n                  id=\"darkMode\"\r\n                />\r\n              </Box>\r\n\r\n              <Box>\r\n                <label htmlFor=\"unit\">Select Temperature Unit</label>\r\n                <RadioGroup\r\n                  id=\"unit\"\r\n                  onChange={(e) => setUserUnit(e)}\r\n                  defaultValue={storePref.unit}\r\n                >\r\n                  <Stack direction=\"row\">\r\n                    <Radio value=\"Metric\">C</Radio>\r\n                    <Radio value=\"Imperial\">F</Radio>\r\n                  </Stack>\r\n                </RadioGroup>\r\n              </Box>\r\n            </Stack>\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Settings;\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport store from \"../store\";\r\nimport dotenv from \"dotenv\";\r\nimport { setCityName, setKey } from \"../actions\";\r\n\r\nconst apikey = process.env.REACT_APP_API_KEY;\r\n\r\nconst Select = () => {\r\n  const userPref = store.getState();\r\n  const [city, setCity] = useState(\"\");\r\n  const [textInput, setTextInput] = useState(\"\");\r\n  const [cityList, setCityList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setCity(userPref.city);\r\n  }, [userPref.city]);\r\n\r\n  useEffect(() => {\r\n    // API call for accuweather auto complete locations and setting the relevant data\r\n    const fetchCityData = () => {\r\n      axios(\r\n        `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apikey}&q=${textInput}`\r\n      ).then((res) => {\r\n        const { data } = res;\r\n        const list = data.map((city) => {\r\n          return {\r\n            name: city.LocalizedName,\r\n            country: city.Country.LocalizedName,\r\n            key: city.Key,\r\n          };\r\n        });\r\n        setCityList(list);\r\n      });\r\n    };\r\n    if (textInput) {\r\n      fetchCityData();\r\n    }\r\n  }, [textInput]);\r\n\r\n  const handleChange = (value) => {\r\n    if (value) {\r\n      setCity(value);\r\n      store.dispatch(setKey(value.key));\r\n      store.dispatch(setCityName(value.name));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      options={cityList}\r\n      getOptionLabel={(option) => {\r\n        return option.name ? option.name : \"\";\r\n      }}\r\n      fullWidth={true}\r\n      value={city}\r\n      onChange={(event, value) => handleChange(value)}\r\n      onInputChange={(event, value) => setTextInput(value)}\r\n      getOptionSelected={(option, value) =>\r\n        option.name === value.name || option === \"\"\r\n      }\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          value={textInput}\r\n          label={\"Location\"}\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n      renderOption={(option) => (\r\n        <span style={{ textTransform: \"capitalize\" }}>{option.name}</span>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport Weather_logos_transparent from \"../images/Weather_logos_transparent.png\";\r\nimport Weather_logos_white from \"../images/Weather_logos_white.png\";\r\nimport Settings from \"./Settings\";\r\nimport Select from \"./Select\";\r\nimport { Box, Tooltip } from \"@chakra-ui/react\";\r\nimport store from \"../store\";\r\nimport { CurrentLocation } from \"@styled-icons/boxicons-regular/CurrentLocation\";\r\nimport { getCurrentPosition } from \"../actions\";\r\n\r\nfunction NevBar() {\r\n  const location = useLocation();\r\n  const userPref = store.getState();\r\n  const [coordinates, setCoordinates] = useState();\r\n\r\n  useEffect(() => {\r\n    // get current location coordinates\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setCoordinates(\r\n        `${position.coords.latitude},${position.coords.longitude}`\r\n      );\r\n    });\r\n  }, []);\r\n\r\n  const handelClick = () => {\r\n    store.dispatch(getCurrentPosition(coordinates));\r\n  };\r\n  return (\r\n    <>\r\n      <Link to=\"/\">\r\n        <img\r\n          src={\r\n            userPref.darkMode ? Weather_logos_white : Weather_logos_transparent\r\n          }\r\n          alt=\"weather logo\"\r\n          className=\"logo\"\r\n        />\r\n      </Link>\r\n      <Tooltip label=\"Get Current Location\" placement=\"left-start\">\r\n        <Link to=\"/\">\r\n          <CurrentLocation\r\n            onClick={handelClick}\r\n            size=\"34\"\r\n            style={{ margin: \"20px\" }}\r\n          />\r\n        </Link>\r\n      </Tooltip>\r\n      <Box w=\"30%\">\r\n        <Select />\r\n      </Box>\r\n      <nav className=\"nav\">\r\n        <ul>\r\n          <li>\r\n            <Link\r\n              className={\r\n                location.pathname === \"/\" ? \"link current-page\" : \"link\"\r\n              }\r\n              to=\"/\"\r\n            >\r\n              Home\r\n            </Link>\r\n          </li>\r\n          <li>\r\n            <Link\r\n              className={\r\n                location.pathname === \"/favorites\"\r\n                  ? \"link current-page\"\r\n                  : \"link\"\r\n              }\r\n              to=\"/favorites\"\r\n            >\r\n              Favorites\r\n            </Link>\r\n          </li>\r\n        </ul>\r\n        <Settings />\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NevBar;\r\n","import \"./App.css\";\nimport { Switch, Route, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Home from \"./components/Home\";\nimport Favorites from \"./components/Favorites\";\nimport NavBar from \"./components/NavBar\";\nimport { useEffect, useState } from \"react\";\nimport store from \"./store\";\nimport { getCurrentPosition } from \"./actions\";\n\nfunction App() {\n  const userPref = store.getState();\n  const [coordinates, setCoordinates] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setCoordinates(\n        `${position.coords.latitude},${position.coords.longitude}`\n      );\n    });\n  }, []);\n\n  useEffect(() => {\n    setDarkMode(Boolean(userPref.darkMode));\n  }, [userPref.darkMode]);\n\n  useEffect(() => {\n    if (coordinates) {\n      store.dispatch(getCurrentPosition(coordinates));\n    }\n  }, [coordinates]);\n  return (\n    <div className={darkMode ? \"app darkMode\" : \"app\"}>\n      <header>\n        <NavBar />\n      </header>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/favorites\" component={Favorites} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return state;\n}\n\nexport default withRouter(connect(mapStateToProps)(App));\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <ChakraProvider>\n          <App />\n        </ChakraProvider>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}